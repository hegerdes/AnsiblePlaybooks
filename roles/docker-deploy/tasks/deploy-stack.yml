# Install app stack
---
- name: Init a new swarm
  when: docker_deploy_use_swarm_mode | bool and not swarm_info.docker_swarm_manager
  docker_swarm:
    advertise_addr: '{{ ansible_host }}'
    state: present
  tags: [docker-deploy]

- name: Install pip3
  when: docker_deploy_use_swarm_mode | bool != true
  apt:
    name: python3-pip
    state: latest
  tags: [docker-deploy]

# May need gcc make python3-dev gcc-multilib libffi-dev
- name: Install compose package
  when: docker_deploy_use_swarm_mode | bool != true
  pip:
    name: docker-compose
  tags: [docker-deploy]

- name: Using override-file with the following content
  debug:
    var: docker_deploy_override
  tags: [docker-deploy, docker-deploy-stack]

- name: Copy compose|stack files
  when: item[-3:] == "yml"
  copy:
    src: '{{ docker_deploy_src_config_files + item }}'
    dest: '{{ docker_deploy_dst_config_files + item }}'
    mode: '0644'
  loop: '{{ docker_deploy_stacks }}'
  tags: [docker-deploy]

- name: Configuring compose|stack files
  when: item[-2:] == "j2"
  template:
    src: '{{ docker_deploy_src_config_files + item }}'
    dest: '{{ docker_deploy_dst_config_files + item }}'
    mode: '0644'
  loop: '{{ docker_deploy_stacks }}'
  tags: [docker-deploy]

- name: Create absolut paths for stack files
  set_fact:
    compose_files_stack: '{{ compose_files_stack | default([]) + ["".join((docker_deploy_dst_config_files,item))] }}'
  loop: '{{ docker_deploy_stacks | list}}'
  tags: [docker-deploy]

- name: Getting all used images
  slurp:
    src: '{{ docker_deploy_dst_config_files + item }}'
  loop: '{{ docker_deploy_stacks | list}}'
  register: deploy_compose_conetent

- name: Organize images
  when: item.content is defined
  set_fact:
    deploy_compose_conetent_img: '{{ deploy_compose_conetent_img | default([]) + item.content | b64decode | from_yaml | json_query("services") | dict2items | map(attribute="value.image") }}'
  loop: '{{ deploy_compose_conetent.results | default([]) }}'
  loop_control:
    label: '{{ item.source }}'
  tags: [docker-deploy]

- name: Check images
  docker_image:
    name: '{{ item.split(":")[0] if(item | regex_findall(":") | length <= 1) else item.split(":")[0] + ":" + item.split(":")[1] }}'
    tag: '{{ item.split(":")[1] | default("latest") if(item | regex_findall(":") | length <= 1) else item.split(":")[2] }}'
    source: pull
  loop: '{{ deploy_compose_conetent_img | default([]) | unique }}'
  tags: [docker-deploy]

- name: Deploy app-stack via stack
  when: compose_files_stack is defined and docker_deploy_use_swarm_mode and swarm_info.docker_swarm_manager
  docker_stack:
    state: present
    name: '{{ docker_deploy_app_name }}'
    prune: '{{ docker_deploy_prune_old_services }}'
    resolve_image: always
    with_registry_auth: yes
    compose: '{{ compose_files_stack | list }}'
  tags: [docker-deploy]

- name: Deploy app-services via compose
  when: docker_deploy_use_swarm_mode | bool != true
  docker_compose:
    project_name: '{{ docker_deploy_app_name }}'
    remove_orphans: yes
    project_src: '{{ docker_deploy_dst_config_files }}'
    files: '{{ docker_deploy_stacks | list }}'
  tags: [docker-deploy]

- name: Sleep for 45 seconds and continue with play
  when: compose_files_stack is defined and docker_deploy_use_swarm_mode and swarm_info.docker_swarm_manager
  wait_for:
    timeout: 45
  tags: [docker-deploy]

- name: Get stack info
  when: docker_deploy_use_swarm_mode | bool
  community.docker.docker_stack_info:
  register: app_docker_stack_info
  tags: [docker-deploy]

- name: Get info on Docker Swarm
  changed_when: False
  when: docker_deploy_use_swarm_mode | bool
  command: docker service ls
  ignore_errors: True
  register: app_docker_swarm_info
  tags: [docker-deploy]

- name: Get info on Docker Containers
  changed_when: False
  command: 'docker ps --format "table {{ "{{" }}.Status{{ "}}" }}\t{{ "{{" }}.RunningFor{{ "}}" }}\t{{ "{{" }} .Image{{ "}}" }}\t{{ "{{" }}.Names{{ "}}" }}"'
  ignore_errors: True
  register: app_docker_container_info
  tags: [docker-deploy]

- name: Show stack info
  when: docker_deploy_use_swarm_mode | bool
  debug:
    var: app_docker_stack_info.results
  tags: [docker-deploy]

- name: Print Swarm Info
  when: docker_deploy_use_swarm_mode | bool
  debug:
    var: app_docker_swarm_info.stdout_lines
  ignore_errors: True
  tags: [docker-deploy]

- name: Show container info
  debug:
    var: app_docker_container_info.stdout_lines
  tags: [docker-deploy]
