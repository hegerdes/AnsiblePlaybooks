# Install app stack
---
- name: Copy compose|stack files
  when: item[-3:] == "yml" or item[-4:] == "ymal"
  copy:
    src: '{{ docker_deploy_src_config_files + item }}'
    dest: '{{ docker_deploy_dst_config_files + item }}'
    mode: '0644'
  loop: '{{ docker_project.compose_files }}'
  tags: [docker-deploy]

- name: Configuring compose|stack files
  when: item[-2:] == "j2"
  template:
    src: '{{ docker_deploy_src_config_files + item }}'
    dest: '{{ docker_deploy_dst_config_files + item[:-3] }}'
    mode: '0644'
  loop: '{{ docker_project.compose_files }}'
  tags: [docker-deploy]

- name: Create absolut paths for stack files
  set_fact:
    compose_files_stack: '{{ compose_files_stack | default([]) + ["".join((docker_deploy_dst_config_files, item if(item[-3:] == "yml") else item[:-3] ))] }}'
  loop: '{{ docker_project.compose_files | list}}'
  tags: [docker-deploy]

- name: Getting generated stack file(s)
  slurp:
    src: '{{ item }}'
  loop: '{{ compose_files_stack | list}}'
  register: deploy_compose_conetent
  tags: [docker-deploy]

- name: Saving generated stack file(s)
  fetch:
    dest: '{{ docker_deploy_artifact_dir }}'
    flat: yes
    src: '{{ item }}'
  loop: '{{ compose_files_stack | list}}'
  tags: [docker-deploy]

- name: Extracting Docker images...
  when: item.content is defined
  set_fact:
    deploy_compose_conetent_img: '{{ deploy_compose_conetent_img | default([]) + item.content | b64decode | from_yaml | json_query("services") | default({}) | dict2items | map(attribute="value.image") }}'
  loop: '{{ deploy_compose_conetent.results | default([]) }}'
  loop_control:
    label: '{{ item.source }}'
  tags: [docker-deploy]

- name: Check docker images
  docker_image:
    name: '{{ item.split(":")[0] if(item | regex_findall(":") | length <= 1) else item.split(":")[0] + ":" + item.split(":")[1] }}'
    tag: '{{ item.split(":")[1] | default("latest") if(item | regex_findall(":") | length <= 1) else item.split(":")[2] }}'
    source: pull
    force_source: yes
  loop: '{{ deploy_compose_conetent_img | default([]) | unique }}'
  tags: [docker-deploy]

- name: Inspect docker images
  docker_image_info:
    name: '{{ item }}'
  register: docker_image_info_res
  loop: '{{ deploy_compose_conetent_img | default([]) | unique }}'
  tags: [docker-deploy]

- name: Format docker image facts
  set_fact:
    image_info_data: '{{ image_info_data | default([]) + [ {(item.item | string | replace(":","-")  ): item.images[0].Config.Labels }] }}'
  loop: '{{ docker_image_info_res.results }}'
  loop_control:
    label: '{{ item.item }}'
  tags: [docker-deploy]

- name: Show image labels
  debug:
    var: image_info_data
  tags: [docker-deploy]

- name: Deploy app-stack via stack
  when: docker_deploy_use_swarm_mode and swarm_info.docker_swarm_manager
  docker_stack:
    state: present
    name: '{{ docker_project.name }}'
    prune: '{{ docker_deploy_prune_old_services }}'
    resolve_image: always
    with_registry_auth: yes
    compose: '{{ compose_files_stack | default([]) | list }}'
  notify: Wait for services to come up
  tags: [docker-deploy]

- name: Deploy app-stack via compose
  when: docker_deploy_use_swarm_mode | bool != true
  docker_compose:
    project_name: '{{ docker_project.name }}'
    remove_orphans: '{{ docker_deploy_prune_old_services }}'
    project_src: '{{ docker_deploy_dst_config_files }}'
    files: '{{ compose_files_stack | default([]) | list }}'
  notify: Wait for services to come up
  tags: [docker-deploy]

- name: Cleaning up facts
  set_fact:
    compose_files_stack: []
    deploy_compose_conetent_img: []
  tags: [docker-deploy]

- name: Ensure handlers are notified now
  meta: flush_handlers
  tags: [docker-deploy]
