# Main Hetzner Setup
---
- name: Gather hcloud sshkey infos
  hcloud_ssh_key_info:
    api_token: '{{ hetzner_api_key }}'
  register: hetzner_ssh_keys

- name: Create a firewall with labels
  hetzner.hcloud.hcloud_firewall:
    api_token: '{{ hetzner_api_key }}'
    name: '{{ item.name }}'
    state: present
    rules: '{{ item.rules | default([]) }}'
  loop: '{{ hetzner_firewalls }}'
  loop_control:
    label: "{{ item.name }}"

- name: Gather hcloud server infos
  hcloud_server_info:
    api_token: '{{ hetzner_api_key }}'
  register: hetzner_server_info

- name: Inspecting server differences...
  no_log: yes
  when: item[0].server_type != item[1].size | default(hetzner_default_server_size)
  set_fact:
    rescale: '{{ rescale | default({}) | combine({item[0].name: item[1].size | default(hetzner_default_server_size)}) }}'
  loop: '{{ hetzner_server_info.hcloud_server_info | sort(attribute="name") | zip(hetzner_vms | sort(attribute="name")) }}'

- name: Rescale VMs - shutdown
  hcloud_server:
    api_token: '{{ hetzner_api_key }}'
    name: '{{ item.key }}'
    state: 'stopped'
  with_dict: '{{ rescale | default({}) }}'

- name: Rescale VMs - rescale
  hcloud_server:
    api_token: '{{ hetzner_api_key }}'
    name: '{{ item.key }}'
    state: 'stopped'
    server_type: '{{ item.value }}'
    state: 'present'
  with_dict: '{{ rescale | default({}) }}'

- name: Create a basic network
  hcloud_network:
    api_token: '{{ hetzner_api_key }}'
    name: '{{ hetzner_default_vnet_name }}'
    ip_range: 10.10.0.0/16
    state: present

- name: Create a basic subnetwork
  hcloud_subnetwork:
    api_token: '{{ hetzner_api_key }}'
    network: '{{ hetzner_default_vnet_name }}'
    ip_range: 10.10.0.0/24
    network_zone: eu-central
    type: cloud
    state: present

- name: Creating/Deleting VMs
  hcloud_server:
    api_token: '{{ hetzner_api_key }}'
    name: '{{ item.name }}'
    labels: '{{ item.labels | default({}) | combine({"ansible": "True", "all": "True"}) }}'
    server_type: '{{ item.size | default(hetzner_default_server_size) }}'
    location: '{{ item.location | default(hetzner_default_server_location) }}'
    image: '{{ item.image | default(hetzner_default_server_image) }}'
    ssh_keys: '{{ item.ssh_keys | default(hetzner_ssh_keys.hcloud_ssh_key_info | map(attribute="name")) }}'
    state: '{{ item.state | default(hetzner_default_server_state) }}'
  loop: '{{ hetzner_vms }}'
  loop_control:
    label: "{{ item.name }}"
  register: hetzner_servers

- name: Attatching VMs to vnet
  when: item.state | default("present") == "present"
  hcloud_server_network:
    api_token: '{{ hetzner_api_key }}'
    network: '{{ hetzner_default_vnet_name }}'
    server: '{{ item.name }}'
    ip: '{{ item.intern_ipintern_ip | default("10.10.0." + (ansible_loop.index + 1) | string )}}'
    state: present
  loop: '{{ hetzner_vms }}'
  loop_control:
    label: "{{ item.name }}"
    extended: yes
  register: hetzner_vnet_res

- name: Gather hcloud server infos
  hcloud_server_info:
    api_token: '{{ hetzner_api_key }}'
  register: hetzner_server_info

- name: Assign a Floating IPs to a server
  when: hetzner_server_info.hcloud_server_info | length > 0
  hcloud_floating_ip:
    api_token: '{{ hetzner_api_key }}'
    name: '{{ item.floting_ip_name }}'
    server: '{{ item.server_name }}'
    state: present
  loop: '{{ hetzner_floating_ip_mapping }}'

- name: Creating inventory[I]...
  when: hetzner_server_info.hcloud_server_info | length > 0
  no_log: yes
  set_fact:
    hetzner_inventory: '{{ hetzner_inventory | combine({"all": {"hosts":{item.hcloud_server_network.server: {"ansible_host": item.hcloud_server_network.ip, "ansible_port": ansible_default_port, "ansible_user": ansible_default_user }}}},recursive=True) }}'
  loop: '{{ hetzner_vnet_res.results }}'

- name: Creating inventory[II]...
  when: hetzner_server_info.hcloud_server_info | length > 0
  no_log: yes
  set_fact:
    servers: '{{ servers | default({}) | combine({item.hcloud_server.name: item.hcloud_server}) }}'
  loop: '{{ hetzner_servers.results }}'

- name: Creating inventory[III] ...
  when: hetzner_server_info.hcloud_server_info | length > 0
  no_log: yes
  set_fact:
    hetzner_inventory_tmp:
      all:
        vars:
          ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o ProxyCommand="ssh -W %h:%p -q root@{{ servers.mgmt.ipv4_address }} -p {{ ansible_default_port }}"'

- name: Creating inventory[IV]...
  when: hetzner_server_info.hcloud_server_info | length > 0
  no_log: yes
  set_fact:
    hetzner_inventory: '{{ hetzner_inventory | combine(hetzner_inventory_tmp, recursive=True) }}'

- name: Creating inventory[V]...
  when: hetzner_server_info.hcloud_server_info | length > 0
  no_log: yes
  set_fact:
    hetzner_inventory: '{{ hetzner_inventory | combine(hetzner_inventory_tmp, recursive=True) }}'
  loop: '{{ hetzner_vms }}'

- name: Creating inventory[VI]...
  when: hetzner_server_info.hcloud_server_info | length > 0
  no_log: yes
  set_fact:
    hetzner_inventory: '{{ hetzner_inventory | combine({"all": {"children": {item[1]: hetzner_inventory.all.children[item[1]] | combine({"hosts": {item[0].name: {} }})} }}, recursive=True) }}'
  loop: '{{ hetzner_vms | subelements("groups", skip_missing=True) }}'

- name: Print generated inventroy
  debug:
    var: hetzner_inventory

- name: Save inventory
  copy:
    content: '{{ hetzner_inventory | to_nice_yaml(indent=2) }}'
    dest: '{{ playbook_dir }}/../hetzner-inventory.yml'

- meta: refresh_inventory