# List pending updates
---
- name: Update apt cache
  apt:
   update_cache: yes
  tags: [maintenance, os-updates]

- name: Get upgradable list
  command: apt list --upgradable
  register: main_updates
  changed_when: false
  tags: [maintenance, os-updates]

- name: No updates
  when: main_updates.stdout_lines | length == 1
  debug:
    msg: 'No updates found'
  tags: [maintenance, os-updates]

- name: Format update string I
  when: main_updates.stdout_lines | length > 1
  set_fact:
    updates: '{{ [item | replace("[","") | replace("]","") | replace(","," ") ] + updates | default([]) }}'
  loop: '{{ main_updates.stdout_lines[1:] }}'
  tags: [maintenance, os-updates]

- name: Format update string II
  when: hostvars[item].updates is defined
  run_once: yes
  set_fact:
    all_updates: '{{ all_updates | default({}) | combine({item: hostvars[item].updates}) }}'
  with_items: '{{ groups.all }}'
  tags: [maintenance, os-updates]

- name: Format update string III
  when: hostvars[item].updates is defined
  run_once: yes
  set_fact:
    all_updates: '{{ all_updates | default({}) | combine({"failed_hosts": ansible_play_hosts_all | difference(ansible_play_batch) | default([])}) }}'
  with_items: '{{ groups.all }}'
  tags: [maintenance, os-updates]

- name: Print updates
  when: hostvars[item].updates is defined
  run_once: yes
  debug:
    var: hostvars[item].updates
  with_items: '{{ groups.all }}'
  tags: [maintenance, os-updates]

- name: Save update file to ...
  when: all_updates is defined
  become: false
  run_once: yes
  copy:
    content: "{{ all_updates }}"
    dest: "/tmp/{{ inventory_dir | basename + lookup('pipe', 'date +\"-%Y-%m-%d\"') }}.json"
  delegate_to: localhost
  tags: [maintenance, os-updates]

- name: Post update log to GitLab
  when: ansible_play_hosts_all | last == inventory_hostname and all_updates is defined and maintenance_post_to_git | bool
  import_tasks: shared/gitlab-post-log.yml
  vars:
    gitlab_conf:
      branch: '{{ maintenance_git_branch }}'
      token: '{{ maintenance_git_token }}'
      content: '{{ all_updates }}'
      email: '{{ maintenance_git_mail }}'
      name: '{{ maintenance_git_name }}'
      commit_message: 'Added pending updates on {{ansible_date_time.date}}'
      url: '{{ maintenance_git_host }}/api/v4/projects/{{ maintenance_git_repo }}/repository/files/host-updates%2F{{ ansible_date_time.date + "-" + ansible_date_time.hour + "-" + ansible_date_time.minute }}-updates.json'
  tags: [maintenance, os-updates]

- name: Get issue on GitLab
  when: maintenance_post_to_git and not maintenance_run_upgrades and all_updates is defined
  import_tasks: shared/gitlab-get-issue.yml
  vars:
    gitlab_conf:
      url: '{{ maintenance_git_host }}/api/v4/projects/{{ maintenance_git_repo }}/issues?labels=aptPendingUpdates&state=opened'
      token: '{{ maintenance_git_token }}'
  tags: [maintenance, os-updates]

- name: Debug
  debug:
    var: main_reop_get_issue_res
  tags: [maintenance, os-updates]

- name: Post new update issue to GitLab
  when: ansible_play_hosts_all | last == inventory_hostname and maintenance_post_to_git and not maintenance_run_upgrades and not main_reop_get_issue_res.skipped and all_updates is defined and main_reop_get_issue_res.json | length == 0
  import_tasks: shared/gitlab-post-issue.yml
  vars:
    gitlab_conf:
      url: '{{ maintenance_git_host }}/api/v4/projects/{{ maintenance_git_repo }}/issues'
      labels: 'maintenance,aptPendingUpdates'
      title: '{{ ansible_date_time.date }} System Updates'
      assignee_id: '{{ maintenance_git_assignee_id }}'
      token: '{{ maintenance_git_token }}'
      response_status: 201
      description: |
        Updates:
        ```yml
        {{ all_updates | to_nice_yaml(width=512) }}
        ```
  tags: [maintenance, os-updates]

- name: Update issue on GitLab
  when: ansible_play_hosts_all | last == inventory_hostname and maintenance_post_to_git and not maintenance_run_upgrades and not main_reop_get_issue_res.skipped and all_updates is defined and main_reop_get_issue_res.json | length > 0
  import_tasks: shared/gitlab-post-issue.yml
  vars:
    gitlab_conf:
      url: '{{ maintenance_git_host }}/api/v4/projects/{{ maintenance_git_repo }}/issues/{{ main_reop_get_issue_res.json | json_query("[0].iid") }}'
      labels: 'maintenance,aptPendingUpdates'
      title: '{{ ansible_date_time.date }} System Updates'
      assignee_id: '{{ maintenance_git_assignee_id }}'
      token: '{{ maintenance_git_token }}'
      response_status: 200
      description: |
        Updates:
        ```yml
        {{ all_updates | to_nice_yaml(width=512) }}
        ```
  tags: [maintenance, os-updates]

- name: Upgrade packages
  when: maintenance_run_upgrades | bool
  apt:
    name: '{{ item.split("/")[0] }}'
    state: latest
  loop: '{{ updates | default([]) }}'
  register: main_updated_packages
  tags: [maintenance, os-updates]

- name: Check for reboot
  stat:
    path: /var/run/reboot-required
  register: main_reboot_needed
  tags: [maintenance, os-updates]

- name: Reoot needed?
  debug:
    msg: 'Reboot needed: {{ main_reboot_needed.stat.exists }}'
  tags: [maintenance, os-updates]

- name: Format update result string I
  when: maintenance_run_upgrades | bool
  set_fact:
    performed_updates: '{{ performed_updates | default({}) | combine({item.item.split("/")[0]: item.stdout_lines[3:]})}}'
  loop: '{{ main_updated_packages.results }}'
  loop_control:
    label: '{{ item.item.split("/")[0] }}'
  tags: [maintenance, os-updates]

- name: Format update result string II
  when: hostvars[item].performed_updates is defined
  run_once: yes
  set_fact:
    all_performed_updates: '{{ all_performed_updates | default({}) | combine({item: hostvars[item].performed_updates, "reboots": {item: hostvars[item].main_reboot_needed.stat.exists}}, recursive=True) }}'
  with_items: '{{ groups.all }}'
  tags: [maintenance, os-updates]

- name: Post update log to GitLab
  when: ansible_play_hosts_all | last == inventory_hostname and all_performed_updates is defined and maintenance_post_to_git | bool
  import_tasks: shared/gitlab-post-log.yml
  vars:
    gitlab_conf:
      branch: '{{ maintenance_git_branch }}'
      token: '{{ maintenance_git_token }}'
      content: '{{ all_performed_updates }}'
      email: '{{ maintenance_git_mail }}'
      name: '{{ maintenance_git_name }}'
      commit_message: 'Installed the following updates on {{ansible_date_time.date}}'
      url: '{{ maintenance_git_host }}/api/v4/projects/{{ maintenance_git_repo }}/repository/files/host-updates%2F{{ansible_date_time.date + "-" + ansible_date_time.hour + "-" + ansible_date_time.minute }}-performed-updates.json'
  tags: [maintenance, os-updates]
