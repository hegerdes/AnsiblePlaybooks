#!/bin/bash

SERVERS=({{ "\"" + mgmt_backup_target_hosts | default([]) | join("\" \"") + "\"" }})
BACKUP_DST="/db_dumps"
PUB_KEY_FILE="${BACKUP_DST}/db-backup.key.pub"
SECRET=$(openssl rand -base64 32)
AZURE_SAS_TOKEN="{{ mgmt_azure_token | default("\"\"") }}"
AWS_BUCKET="{{ mgmt_s3_uri | default("\"\"") }}"

# create btk dir
mkdir -p $BACKUP_DST

for SERVER in "${SERVERS[@]}"; do
    for DUMP_FILE in $(ssh $SERVER "ls -t /db_dumps/*.gz"); do
        echo "${SERVER}: getting ${DUMP_FILE}..."
        # Extract file names
        DUMP_FILE_NAME=$(ssh $SERVER "basename ${DUMP_FILE}")
        DUMP_DATE=${DUMP_FILE_NAME:0:10}
        mkdir -p $BACKUP_DST/$DUMP_DATE
        # Get DB dump
        ssh $SERVER "cat ${DUMP_FILE}" | gpg --batch --yes --symmetric --passphrase $SECRET > $BACKUP_DST/$DUMP_DATE/$DUMP_FILE_NAME.gpg
        # Saving the key used for encryption
        echo "${SERVER}: Encrypted and saved KEY to $BACKUP_DST/$DUMP_DATE/KEY.acs"
        echo $SECRET | openssl rsautl -encrypt -inkey $PUB_KEY_FILE -pubin -out $BACKUP_DST/$DUMP_DATE/KEY.acs
        echo "${SERVER}: Compressed and encrypted ${DUMP_FILE}"
        # Remove old backups
        if [[ $(date '+%Y-%m-%d') != $DUMP_DATE ]]; then
            echo "${SERVER}: Removing ${DUMP_FILE}"
            ssh $SERVER "rm ${DUMP_FILE}"
        fi
    done
done

{% if mgmt_s3_uri | default("none") != "none" %}
################################ AWS ###############################
echo "Running: aws s3 cp ${BACKUP_DST}/$(date '+%Y-%m-%d') s3://${AWS_BUCKET}${BACKUP_DST}/$(date '+%Y-%m-%d') --recursive"
aws s3 cp ${BACKUP_DST}/$(date '+%Y-%m-%d') s3://${AWS_BUCKET}${BACKUP_DST}/$(date '+%Y-%m-%d') --recursive
{% endif %}

{% if mgmt_azure_token | default("none") != "none" %}
############################### AZURE ##############################
echo "Running: azcopy copy ${BACKUP_DST}/$(date '+%Y-%m-%d') \$TOKEN\$ --recursive=true"
azcopy copy ${BACKUP_DST}/$(date '+%Y-%m-%d') $AZURE_SAS_TOKEN --recursive=true
{% endif %}

############################ REMOVE-OLD ############################
echo "Will remove:"
ls -t ${BACKUP_DST}/*.gz | sed -e '1,6d' 2> /dev/null
ls -t ${BACKUP_DST}/*.gz | sed -e '1,6d' | xargs -r -d '\n' rm 2> /dev/null

############################ Decrypting ############################
# Decrypt random key
# openssl rsautl -decrypt -in KEY.acs -out KEY.out -inkey db-backup-key
# Decrypt backup with radnom key
# gpg --batch --decrypt --passphrase $(cat KEY.out) <FILE> | gzip -d > <OUT_FILE>
