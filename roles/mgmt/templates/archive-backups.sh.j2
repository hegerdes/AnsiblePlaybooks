#!/bin/bash

# Make it prittttyyyy
RED='\033[0;31m'
NC='\033[0m'

SERVERS=({{ "\"" + mgmt_backup_target_hosts | default([]) | join("\" \"") + "\"" }})
SSH_EXTRA_ARGS="{{ gmt_backup_target_ssh_args }}"
BACKUP_DST=${CUSTOM_BACKUP_DIR:="{{ backup_dir }}"}
PUB_KEY_FILE="${BACKUP_DST}/db-backup.key.pub"
SECRET=$(openssl rand -base64 32)
AZURE_SAS_TOKEN="{{ mgmt_azure_token | default("\"\"") }}"
BACKUPS_TO_KEEP="{{ mgmt_images_to_keep | default(2) }}"
AWS_BUCKET="{{ mgmt_s3_uri | default("\"\"") }}"

checkExitCode() {
    if [ $1 -ne 0 ]; then
        echo -e "${RED}Last command returned none zero exit code. Please check${NC}"
        exit 1
    fi
}

if [ "${SERVERS[0]}" == "" ]; then
    echo "Nothing to do."
    exit 0
fi

# Create btk dir
mkdir -p $BACKUP_DST
{{ "KEEP=$((${#SERVERS[@]} * BACKUPS_TO_KEEP))" }}

set -e
for SERVER in "${SERVERS[@]}"; do
    # Connection check
    ssh $SERVER $SSH_EXTRA_ARGS "ls -t ${BACKUP_DST}/*.gz" > /dev/null
    checkExitCode $?
    for DUMP_FILE in $(ssh $SERVER $SSH_EXTRA_ARGS "ls -t ${BACKUP_DST}/*.gz"); do
        echo "${SERVER}: Getting ${DUMP_FILE}..."

        # Extract file names
        DUMP_FILE_NAME=$(ssh $SERVER $SSH_EXTRA_ARGS "basename ${DUMP_FILE}")
        checkExitCode $?
        DUMP_DATE=${DUMP_FILE_NAME:0:10}
        mkdir -p $BACKUP_DST/$DUMP_DATE

        # Get DB dump
        ssh $SERVER $SSH_EXTRA_ARGS "cat ${DUMP_FILE}" | gpg --batch --yes --compress-level 0 --symmetric --passphrase $SECRET > $BACKUP_DST/$DUMP_DATE/$DUMP_FILE_NAME.gpg
        checkExitCode $?

        # Saving the key used for encryption
        echo "${SERVER}: Encrypted and saved KEY to $BACKUP_DST/$DUMP_DATE/KEY.acs"
        echo $SECRET | openssl rsautl -encrypt -inkey $PUB_KEY_FILE -pubin -out $BACKUP_DST/$DUMP_DATE/KEY.acs
        echo "${SERVER}: Compressed and encrypted ${DUMP_FILE}"
        # Remove old backups
        if [[ $(date '+%Y-%m-%d') != $DUMP_DATE ]]; then
            echo "${SERVER}: Removing ${DUMP_FILE}"
            ssh $SERVER $SSH_EXTRA_ARGS "rm ${DUMP_FILE}"
            checkExitCode $?
        fi
    done
done

# Copy done
echo -e "Copied all dumps from target hosts!\n"

{% if mgmt_s3_uri | default("none") != "none" %}
################################ AWS ###############################
echo "Running: aws s3 cp ${BACKUP_DST}/$(date '+%Y-%m-%d') s3://${AWS_BUCKET}${BACKUP_DST}/$(date '+%Y-%m-%d') --recursive"
aws s3 cp ${BACKUP_DST}/$(date '+%Y-%m-%d') s3://${AWS_BUCKET}${BACKUP_DST}/$(date '+%Y-%m-%d') --recursive
checkExitCode $?
{% endif %}

{% if mgmt_azure_token | default("none") != "none" %}
############################### AZURE ##############################
echo "Running: azcopy copy ${BACKUP_DST}/$(date '+%Y-%m-%d') \$TOKEN\$ --recursive=true"
azcopy copy ${BACKUP_DST}/$(date '+%Y-%m-%d') $AZURE_SAS_TOKEN --recursive=true
checkExitCode $?
{% endif %}

############################ REMOVE-OLD ############################
echo "Will remove:"
ls -t ${BACKUP_DST}/**/*.gpg | sed -e "1,${KEEP}d" 2> /dev/null
ls -t ${BACKUP_DST}/**/*.gpg | sed -e "1,${KEEP}d" | xargs -r -d '\n' rm 2> /dev/null

ls -t ${BACKUP_DST}/**/*.acs | sed -e "1,${KEEP}d" 2> /dev/null
ls -t ${BACKUP_DST}/**/*.acs | sed -e "1,${KEEP}d" | xargs -r -d '\n' rm 2> /dev/null

find ${BACKUP_DST} -type d -empty -delete

############################ Decrypting ############################
# Decrypt random key
# openssl rsautl -decrypt -in KEY.acs -out KEY.out -inkey db-backup-key
# Decrypt backup with radnom key
# gpg --batch --decrypt --passphrase $(cat KEY.out) <FILE> | gzip -d > <OUT_FILE>
