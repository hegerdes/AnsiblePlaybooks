# Install Backup script
---
- name: Create directory for backups
  file:
    path: '{{ backup_dir }}'
    state: directory
  tags: [mgmt, backup]

- name: Check for backup ssl key
  become: false
  stat:
    path: '{{ inventory_dir }}/secrets/db-backup.key'
  register: mgmt_backup_key
  delegate_to: localhost
  tags: [mgmt, backup]

- name: Check for backup ssl key passphrase
  become: false
  stat:
    path: '{{ inventory_dir }}/secrets/db-backup.key.pass'
  register: mgmt_backup_key_pass
  delegate_to: localhost
  tags: [mgmt, backup]

- name: SSL key passphrase not found
  fail:
    msg: |
      No passphrase for SSL backup key found.
      Please create it under {{ inventory_dir }}/secrets/db-backup.key.pass
  when: not mgmt_backup_key_pass.stat.exists
  tags: [mgmt, backup]

- name: Creating backup key
  when: not mgmt_backup_key.stat.exists
  delegate_to: localhost
  become: false
  run_once: True
  environment:
    KEY_FILE: '{{ inventory_dir }}/secrets/db-backup.key'
    KEY_PASS: '{{ lookup("file", inventory_dir + "/secrets/db-backup.key.pass") }}'
  shell: |
    openssl genrsa -aes256 -out $KEY_FILE -passout pass:$KEY_PASS 2048
    openssl rsa -in $KEY_FILE -passin pass:$KEY_PASS -pubout > $KEY_FILE.pub
  tags: [mgmt, backup]

- name: Copy public key
  copy:
    src: '{{ inventory_dir }}/secrets/db-backup.key.pub'
    dest: '{{ backup_dir }}'
    owner: root
    group: root
  tags: [mgmt, backup]

- name: Copy script for backup archiveal
  template:
    src: archive-backups.sh.j2
    dest: '{{ backup_dir }}/archive-backups.sh'
    owner: root
    group: root
    mode: '0655'
  tags: [mgmt, backup]
