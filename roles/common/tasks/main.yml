# Role common main
---
- name: Set timezone
  timezone:
    hwclock: UTC
    name: '{{ common_time_zone }}'
  tags: [common, time]

- name: Getting all hostkeys
  when: hostvars[item].ansible_facts[common_default_network_device] is defined
  run_once: True
  set_fact:
    all_hostkeys: "{{ all_hostkeys | default([]) + [hostvars[item].ansible_facts[common_default_network_device].ipv4.address + ' ssh-rsa ' + hostvars[item].ansible_facts.ssh_host_key_rsa_public] + [hostvars[item].ansible_facts[common_default_network_device].ipv4.address + ' ssh-ed25519 ' + hostvars[item].ansible_facts.ssh_host_key_ed25519_public] + [hostvars[item].ansible_facts[common_default_network_device].ipv4.address + ' ecdsa-sha2-nistp256 ' + hostvars[item].ansible_facts.ssh_host_key_ecdsa_public] }}"
  with_items: '{{ groups.all }}'
  tags: [common, hostnames]

- name: Setup ssh ports
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^Port {{ item }}$'
    line: 'Port {{ item }}'
  loop: '{{ ssh_listen_ports | default(["22", "2223"])}}'
  notify: Restart SSHD
  tags: [mgmt, ssh]

- name: Install aptitude using apt
  apt:
    name: aptitude
    state: latest
    update_cache: yes
  tags: [common, apt]

- name: Install required system packages
  apt:
    name: '{{ item }}'
    state: latest
    install_recommends: no
  loop:
    - 'software-properties-common'
    - 'apt-transport-https'
    - 'ca-certificates'
    - 'wget'
    - 'curl'
    - 'tar'
    - 'jq'
    - 'gzip'
    - 'pigz'
    - 'pass'
    - 'rsync'
    - 'gnupg'
    - 'gnupg2'
    - 'openssl'
    - 'apparmor'
    - 'lsb-release'
    - 'python3-pip'
    - 'python3-requests'
    - 'python3-jsondiff'
    - 'python3-yaml'
    - 'unzip'
    - 'git'
  tags: [common, apt]

- name: Install additional packages
  apt:
    name: '{{ item }}'
    state: latest
    install_recommends: no
  loop: '{{ common_extra_packages }}'
  tags: [common, apt]

- name: Remove specified packages
  apt:
    name: '{{ item }}'
    state: absent
  loop: '{{ common_delete_packages }}'
  tags: [common, apt]

- name: Set hostnames
  import_tasks: install-hostnames.yml
  tags: [common, hostnames]

- name: Add ssh keys
  import_tasks: set-ssh-keys.yml
  tags: [common, ssh-keys]

- name: Disable swap
  command: swapoff -a
  register: c_out
  changed_when: c_out.stdout != ""
  tags: [common, swap]

- name: Remove swap in /etc/fstab
  lineinfile:
    path: /etc/fstab
    regexp: '\sswap\s'
    state: absent
  tags: [common, swap]

- name: Mount devices
  mount:
    path: '{{ item.destination }}'
    src: '{{ item.source }}'
    fstype: '{{ item.filesystem }}'
    opts: '{{ item.options }}'
    state: mounted
    backup: yes
    boot: yes
  loop: '{{ common_device_mounts }}'
  tags: [common, mounts]

- name: Ensue cgroup memory support
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX='
    line: GRUB_CMDLINE_LINUX=""
  tags: [common, sys]
  notify: Update grub

- name: Set floating IPs
  when: common_floating_ips | length > 0
  import_tasks: shared/set-floting-ip.yml
  vars:
    floating_ips: '{{ common_floating_ips }}'
  tags: [common, ingress-ip]

- name: Set network interfaces
  blockinfile:
    path: /etc/network/interfaces
    block: |
      auto {{ item.interface }}{{ "." + item.virtual_id | string if(item.virtual_id is defined) }}
      iface {{ item.interface }}{{ "." + item.virtual_id | string if(item.virtual_id is defined) }} inet static
        mtu {{ item.mtu | default(1400) }}
        address {{ item.address }}
        netmask {{ item.netmask | default("255.255.255.0") }}
        up ip route add {{ item.cloud_net }} via {{ item.subnet }} dev {{ item.interface }}{{ "." + item.virtual_id | string if(item.virtual_id is defined) }}
        down ip route del {{ item.cloud_net }} via {{ item.subnet }} dev {{ item.interface }}{{ "." + item.virtual_id | string if(item.virtual_id is defined) }}
        {{ "vlan-raw-device " + item.interface | string if(item.virtual_id is defined) }}
  loop: '{{ common_network_interfaces }}'
  notify: Restart network service
  tags: [common, network]

- name: Ensure logfile for cron exists
  lineinfile:
    path: /var/log/cron.log
    line: \#Cron Log file
    create: yes
    mode: '0644'
  tags: [common, cron]

- name: Install cron jobs
  import_tasks: shared/install-cron-jobs.yml
  vars:
    cron_jobs: '{{ common_cron_jobs }}'
  tags: [common, cron]

- name: Ensure handlers are notified now
  meta: flush_handlers
  tags: [common]