# Install nginx-hosts and run certbot
---
- name: Copy NGINX conf files
  copy:
    src: '{{ nginx_src_config_dir }}'
    dest: /etc/nginx/
    owner: root
    group: root
    mode: '0644'
  notify: Restart nginx

- name: Check for dhparam.pem
  stat:
    path: /etc/nginx/dhparam.pem
  register: nginx_dhparam_result

- name: Creating dhparam.pem
  when: not nginx_dhparam_result.stat.exists
  command: openssl dhparam -out /etc/nginx/dhparam.pem 2048

- name: Create nginx metrics status page
  template:
    src: internal-status.conf.j2
    dest: /etc/nginx/conf.d/internal-status.conf
    mode: '0644'
  notify: Restart nginx

- name: Check nginx syntax
  command: nginx -t
  register: res
  changed_when: false
  failed_when: '"warn" is in res.stderr_lines or "emerg" is in res.stderr_lines or res.rc != 0'

- name: Ensure handlers are notified now
  meta: flush_handlers

- name: Verify Nginx is started
  service:
    name: nginx
    state: started

- name: Create directory for dummy certs
  file:
    path: /etc/letsencrypt/dummy
    state: directory

- name: Copy dummy certs
  copy:
    src: '{{ item }}.dummy'
    dest: '/etc/letsencrypt/dummy/{{ item }}'
    owner: root
    group: root
    mode: '0777'
  loop: ['fullchain.pem', 'privkey.pem']

- name: Find all nginx hosts
  shell: |
    cd /etc/nginx/conf.d
    ls *.conf
  register: nginx_deployed_hosts
  changed_when: false

- name: Creating hosts for nginx
  when: nginx_vhost.host + ".conf" not in nginx_deployed_hosts.stdout_lines or nginx_force_reinstall_hosts
  template:
    src: 'site.conf.j2'
    dest: '/etc/nginx/conf.d/{{ nginx_vhost.host }}.conf'
    mode: '0644'
  loop: '{{ nginx_vhosts }}'
  loop_control:
    loop_var: nginx_vhost
  notify: Reload nginx
  register: nginx_created_hosts

- name: Copy ssl-nginx.conf|ssl-dhparams.pem
  copy:
    src: '{{ item }}'
    dest: '/etc/letsencrypt/{{ item }}'
    owner: root
    group: root
    mode: '0644'
  notify: Reload nginx
  loop: ['options-ssl-nginx.conf', 'ssl-dhparams.pem']

- name: Check nginx syntax
  command: nginx -t
  register: res
  changed_when: false
  failed_when: '"warn" is in res.stderr_lines or "emerg" is in res.stderr_lines or res.rc != 0'

- name: Ensure handlers are notified now
  meta: flush_handlers

- name: Verify Certbot Installation
  when: nginx_run_certbot | bool
  apt:
    name: '{{ item }}'
    state: latest
  loop: [ 'certbot', 'python3-certbot', 'python3-certbot-nginx']

- name: Run Certbot
  when: nginx_run_certbot | bool and (nginx_created_hosts.changed or nginx_force_reinstall_hosts)
  command: 'certbot --nginx -d {{ nginx_vhost.host }} --agree-tos --non-interactive -m {{ nginx_certbot_mail }} {{"--test-cert" if (nginx_testing_certbot | default(false) ) }}'
  loop: '{{ nginx_vhosts }}'
  loop_control:
    loop_var: nginx_vhost
    label: '{{ nginx_vhost.host }}'
  notify: Reload nginx

- name: Check nginx syntax
  when: nginx_run_certbot | bool
  command: nginx -t
  register: res
  changed_when: false
  failed_when: '"warn" is in res.stderr_lines or "emerg" is in res.stderr_lines or res.rc != 0'

- name: Ensure handlers are notified now
  meta: flush_handlers
