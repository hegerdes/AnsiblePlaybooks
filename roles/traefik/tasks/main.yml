# Main Traefik Setup
---
- name: Install traefik
  import_tasks: install-traefik.yml
  tags: [ingress, traefik]

- name: Creating router config
  set_fact:
    traefik_routers_tmp: '{{ traefik_routers_tmp | default({}) | combine({item.host.split(".")[0]: {"entryPoints": ["web" if(traefik_use_docker) else "web_" + item.ip | default(ansible_default_ipv4.address) | hash("md5"), "websecure" if(traefik_use_docker) else "websecure_" + item.ip | default(ansible_default_ipv4.address) | hash("md5")], "service": item.host.split(".")[0], "rule": "Host(`" + item.host +"`)", "tls": {"certresolver": "traefik_ssl_resolver"}, "middlewares": [item.traefik.middlewares | default([])] | flatten }}) }}'
  loop: '{{ ingress_hosts.sites | default(traefik_default_hosts.sites) }}'
  loop_control:
    label: '{{ item.host }}'
  tags: [ingress, traefik]

- name: Creating service config 1
  set_fact:
    traefik_services_tmp: '{ {% for item in ingress_hosts.sites %}{{ item.host.split(".")[0] }}: [{%for up in item.upstreams %}{ {{ "url: http://" + up if(item.traefik.protocol | default("http") == "http") else "address: " + up}} }{{ ", " if not loop.last }}{% endfor %}]{{", " if not loop.last}}{% endfor %} }'
  tags: [ingress, traefik]

- name: Creating service config 2
  set_fact:
    traefik_services_tmp: '{{ traefik_services_tmp | from_yaml }}'
  tags: [ingress, traefik]

- name: Creating service config 3
  set_fact:
    traefik_services_tmp: '{{ traefik_services_tmp | default({}) | combine({item.host.split(".")[0]: {"loadBalancer": {"servers": traefik_services_tmp[item.host.split(".")[0]] }} }, recursive=True) }}'
  loop: '{{ ingress_hosts.sites | default(traefik_default_hosts.sites) }}'
  loop_control:
    label: '{{ item.host }}'
  tags: [ingress, traefik]

- name: Creating entrypoints
  set_fact:
    traefik_entrypoints: '{{ traefik_entrypoints | default({}) | combine({"web" if(traefik_use_docker) else "web_" + item.ip | default(ansible_default_ipv4.address) | hash("md5"): {"address": item.ip | default(ansible_default_ipv4.address) + ":80"}, "websecure" if(traefik_use_docker) else "websecure_" + item.ip | default(ansible_default_ipv4.address) | hash("md5"): {"address": item.ip | default(ansible_default_ipv4.address) + ":443"} }, recursive=True) }}'
  loop: '{{ ingress_hosts.sites | default(traefik_default_hosts.sites) }}'
  loop_control:
    label: '{{ item.host }}'
  tags: [ingress, traefik]

- name: Creating cert resolver
  set_fact:
    traefik_cert_resolver:
      traefik_ssl_resolver:
        acme:
          email: '{{ traefik_certbot_mail }}'
          storage: /srv/traefik/tls
          httpChallenge:
            entryPoint: web_b742f2d905e8c3c1e1f726de1bcfbe0f
  tags: [ingress, traefik]

- name: Creating http config
  set_fact:
    traefik_sites:
      http:
        routers: '{{ traefik_routers_tmp }}'
        services: '{{ traefik_services_tmp }}'
        middlewares: '{{ ingress_hosts.conf.traefik.middlewares | default({}) }}'
      tcp:
        routers: '{{ traefik_tcp_routers_tmp }}'
        services: '{{ traefik_tcp_services_tmp }}'
  tags: [ingress, traefik]

- name: debug
  debug:
    var: traefik_sites
  tags: [ingress, traefik]

- name: debug
  debug:
    var: traefik_entrypoints
  tags: [ingress, traefik]

- name: Copy traefik config
  copy:
    content: '{{ lookup("file", "traefik/traefik-conf.yml") | from_yaml | combine({"entryPoints": traefik_entrypoints, "certificatesResolvers": traefik_cert_resolver}) | to_nice_yaml(indent=2) }}'
    dest: /srv/traefik/traefik-conf.yml
  tags: [ingress, traefik]

- name: Copy traefik host config
  copy:
    content: '{{ traefik_sites | to_nice_yaml(indent=2) }}'
    dest: /srv/traefik/hosts/traefik-hosts.yml
  tags: [ingress, traefik]
